//
// FX Version: fx_5_0
//
// 5 local buffer(s)
//
cbuffer vars_for_calculate : register(b0)
{
    float   shouldemit;                 // Offset:    0, size:    4
    float3  emit_pos;                   // Offset:    4, size:   12
    float4  gravity;                    // Offset:   16, size:   16
}

cbuffer global_delta : register(b1)
{
    float2  padding2;                   // Offset:    0, size:    8
    float   GlobalTime;                 // Offset:    8, size:    4
    float   DeltaTime;                  // Offset:   12, size:    4
}

cbuffer vars_for_render : register(b2)
{
    float4x4 worldViewProj;             // Offset:    0, size:   64
    float4x4 InvViewMx;                 // Offset:   64, size:   64
}

cbuffer vars_for_render : register(b3)
{
    float   sea_level;                  // Offset:    0, size:    4
    float3  padding;                    // Offset:    4, size:   12
}

cbuffer cbImmutable
{
    float3  fog_positions[4] = { -0.5, 0.5, 0, 0.5, 0.5, 0, -0.5, -0.5, 0, 0.5, -0.5, 0 };// Offset:    0, size:   60
    float2  g_texcoords[4] = { 0, 1, 1, 1, 0, 0, 1, 0 };// Offset:   64, size:   56
}

//
// 7 local object(s)
//
SamplerState g_samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};
SamplerState g_samPoint
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(WRAP /* 1 */);
};
BlendState AdditiveBlending
{
    AlphaToCoverageEnable = bool(FALSE /* 0 */);
    BlendEnable[0] = bool(TRUE /* 1 */);
    SrcBlend[0] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[1] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[2] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[3] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[4] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[5] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[6] = uint(SRC_ALPHA /* 5 */);
    SrcBlend[7] = uint(SRC_ALPHA /* 5 */);
    DestBlend[0] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[1] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[2] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[3] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[4] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[5] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[6] = uint(INV_SRC_ALPHA /* 6 */);
    DestBlend[7] = uint(INV_SRC_ALPHA /* 6 */);
    BlendOp[0] = uint(ADD /* 1 */);
    BlendOp[1] = uint(ADD /* 1 */);
    BlendOp[2] = uint(ADD /* 1 */);
    BlendOp[3] = uint(ADD /* 1 */);
    BlendOp[4] = uint(ADD /* 1 */);
    BlendOp[5] = uint(ADD /* 1 */);
    BlendOp[6] = uint(ADD /* 1 */);
    BlendOp[7] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ZERO /* 1 */);
    SrcBlendAlpha[1] = uint(ZERO /* 1 */);
    SrcBlendAlpha[2] = uint(ZERO /* 1 */);
    SrcBlendAlpha[3] = uint(ZERO /* 1 */);
    SrcBlendAlpha[4] = uint(ZERO /* 1 */);
    SrcBlendAlpha[5] = uint(ZERO /* 1 */);
    SrcBlendAlpha[6] = uint(ZERO /* 1 */);
    SrcBlendAlpha[7] = uint(ZERO /* 1 */);
    DestBlendAlpha[0] = uint(ZERO /* 1 */);
    DestBlendAlpha[1] = uint(ZERO /* 1 */);
    DestBlendAlpha[2] = uint(ZERO /* 1 */);
    DestBlendAlpha[3] = uint(ZERO /* 1 */);
    DestBlendAlpha[4] = uint(ZERO /* 1 */);
    DestBlendAlpha[5] = uint(ZERO /* 1 */);
    DestBlendAlpha[6] = uint(ZERO /* 1 */);
    DestBlendAlpha[7] = uint(ZERO /* 1 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    BlendOpAlpha[1] = uint(ADD /* 1 */);
    BlendOpAlpha[2] = uint(ADD /* 1 */);
    BlendOpAlpha[3] = uint(ADD /* 1 */);
    BlendOpAlpha[4] = uint(ADD /* 1 */);
    BlendOpAlpha[5] = uint(ADD /* 1 */);
    BlendOpAlpha[6] = uint(ADD /* 1 */);
    BlendOpAlpha[7] = uint(ADD /* 1 */);
    RenderTargetWriteMask[0] = byte(0x0f);
};
DepthStencilState DisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
Texture1D ramdom_tex;
Texture2D particle_tex;
GeometryShader geo_shade = 
    asm {
        //
        // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
        //
        //
        // Buffer Definitions: 
        //
        // cbuffer vars_for_calculate
        // {
        //
        //   float shouldemit;                  // Offset:    0 Size:     4
        //   float3 emit_pos;                   // Offset:    4 Size:    12 [unused]
        //   float4 gravity;                    // Offset:   16 Size:    16 [unused]
        //
        // }
        //
        // cbuffer global_delta
        // {
        //
        //   float2 padding2;                   // Offset:    0 Size:     8 [unused]
        //   float GlobalTime;                  // Offset:    8 Size:     4
        //   float DeltaTime;                   // Offset:   12 Size:     4
        //
        // }
        //
        //
        // Resource Bindings:
        //
        // Name                                 Type  Format         Dim Slot Elements
        // ------------------------------ ---------- ------- ----------- ---- --------
        // g_samPoint                        sampler      NA          NA    0        1
        // ramdom_tex                        texture  float4          1d    0        1
        // vars_for_calculate                cbuffer      NA          NA    0        1
        // global_delta                      cbuffer      NA          NA    1        1
        //
        //
        //
        // Input signature:
        //
        // Name                 Index   Mask Register SysValue Format   Used
        // -------------------- ----- ------ -------- -------- ------ ------
        // POSITION                 0   xyz         0     NONE  float   xyz 
        // TIMER                    0      w        0     NONE  float      w
        // NORMAL                   0   xyz         1     NONE  float   xyz 
        // TYPE                     0   x           2     NONE   uint   x   
        //
        //
        // Output signature:
        //
        // Name                 Index   Mask Register SysValue Format   Used
        // -------------------- ----- ------ -------- -------- ------ ------
        // POSITION                 0   xyz         0     NONE  float   xyz 
        // TIMER                    0      w        0     NONE  float      w
        // NORMAL                   0   xyz         1     NONE  float   xyz 
        // TYPE                     0   x           2     NONE   uint   x   
        //
        gs_4_0
        dcl_constantbuffer cb0[1], immediateIndexed
        dcl_constantbuffer cb1[1], immediateIndexed
        dcl_sampler s0, mode_default
        dcl_resource_texture1d (float,float,float,float) t0
        dcl_input v[1][0].xyz
        dcl_input v[1][0].w
        dcl_input v[1][1].xyz
        dcl_input v[1][2].x
        dcl_temps 5
        dcl_inputprimitive point 
        dcl_outputtopology pointlist 
        dcl_output o0.xyz
        dcl_output o0.w
        dcl_output o1.xyz
        dcl_output o2.x
        dcl_maxout 128
        
        #line 201 "C:\Users\Not John\Desktop\year4\08961\08960_08961_ACW\SandGlobe\SandGlobe\Fog_P_Effect.fx"
        if_z v[0][2].x
          nop 
          mov r0.xyz, v[0][0].xyzx  // vin<0,1,2>
          mov r1.xyz, v[0][1].xyzx  // vin<3,4,5>
          mov r0.w, v[0][0].w  // vin<6>
          mov r1.w, v[0][2].x  // vin<7>
        
        #line 156
          ge r2.x, l(0.000000), r0.w
          lt r2.y, l(0.000000), cb0[0].x
          and r2.x, r2.y, r2.x
          if_nz r2.x
        
        #line 159
            mov r2.x, l(0)  // i<0: 0>
            mov r2.y, r2.x  // i<0:[0,1]>
            loop 
              ilt r2.z, r2.y, l(1)
              breakc_z r2.z
              nop 
              utof r2.z, r1.w  // fOffset<0:[0f,4.29497e+009f]>
        
        #line 147
              add r2.z, r2.z, cb1[0].z
              div r2.z, r2.z, l(300.000000)  // tCoord<0:[-1.13427e+036f,1.13427e+036f]>
              sample_l r3.xyzw, r2.z, t0.xyzw, s0, l(0.000000)
              mov r3.xyz, r3.xyzx  // RandomDir<0:Inf,1:Inf,2:Inf>
        
        #line 161
              dp3 r2.z, r3.xyzx, r3.xyzx
              rsq r2.z, r2.z
              mul r3.xyz, r2.zzzz, r3.xyzx  // vel<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
              max r2.z, r3.y, l(0.100000)
              min r4.y, r2.z, l(0.200000)  // vel<1:[0.1f,0.2f]>
        
        #line 167
              max r2.z, r3.x, l(-0.100000)
              min r4.x, r2.z, l(0.100000)  // vel<0:[-0.1f,0.1f]>
              max r2.z, r3.z, l(-0.100000)
              min r4.z, r2.z, l(0.100000)  // vel<2:[-0.1f,0.1f]>
              mov r3.xyz, r0.xyzx  // Fog_p<0,1,2>
              mov r4.x, r4.x  // Fog_p<3:[-0.1f,0.1f]>
              mov r4.y, r4.y  // Fog_p<4:[0.1f,0.2f]>
              mov r4.z, r4.z  // Fog_p<5:[-0.1f,0.1f]>
              mov r2.z, l(18.000000)  // Fog_p<6: 18f>
              mov r2.w, l(1)  // Fog_p<7: 1u>
              mov o0.xyz, r3.xyzx  // OutStream<0,0,0>
              mov o0.w, r2.z  // OutStream<0>
              mov o1.xyz, r4.xyzx  // OutStream<0,0,0>
              mov o2.x, r2.w  // OutStream<0>
              emit 
        
        #line 159
              iadd r2.y, r2.y, l(1)  // i<0:[1,2]>
            endloop 
            mov r0.w, l(1.000000)  // vin<6: 1f>
          else 
        
        #line 180
            mov r2.x, -cb1[0].w
            add r0.w, r0.w, r2.x  // vin<6:Inf>
        
        #line 156
          endif 
        
        #line 182
          mov o0.xyz, r0.xyzx  // OutStream<0,0,0>
          mov o0.w, r0.w  // OutStream<0>
          mov o1.xyz, r1.xyzx  // OutStream<0,0,0>
          mov o2.x, r1.w  // OutStream<0>
          emit 
        
        #line 201
        else 
        
        #line 205
          ieq r0.x, v[0][2].x, l(1)
          if_nz r0.x
            nop 
            mov r0.xyz, v[0][0].xyzx  // vin<0,1,2>
            mov r1.xyz, v[0][1].xyzx  // vin<3,4,5>
            mov r0.w, v[0][0].w  // vin<6>
            mov r1.w, v[0][2].x  // vin<7>
        
        #line 187
            lt r2.x, l(0.000000), r0.w
            if_nz r2.x
              mul r2.xyz, r1.xyzx, cb1[0].wwww
              add r0.xyz, r0.xyzx, r2.xyzx  // vin<0:Inf,1:Inf,2:Inf>
              mov r2.x, -cb1[0].w
              add r0.w, r0.w, r2.x  // vin<6:Inf>
              mov o0.xyz, r0.xyzx  // OutStream<0,0,0>
              mov o0.w, r0.w  // OutStream<0>
              mov o1.xyz, r1.xyzx  // OutStream<0,0,0>
              mov o2.x, r1.w  // OutStream<0>
              emit 
        
        #line 187
            endif 
        
        #line 205
          endif 
        
        #line 201
        endif 
        ret 
        // Approximately 76 instruction slots used
            
    }
/* Stream out decl: "POSITION.xyz;NORMAL.xyz;TIMER.x;TYPE.x;" */;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 2 technique(s)
    //
    technique11 RenderScene
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float       
                // TIMER                    0   x           2     NONE  float   x   
                // TYPE                     0   x           3     NONE   uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // RADIUS                   0      w        0     NONE  float      w
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TYPE                     0   x           2     NONE   uint   x   
                //
                vs_4_0
                dcl_input v0.xyz
                dcl_input v2.x
                dcl_input v3.x
                dcl_output o0.xyz
                dcl_output o0.w
                dcl_output o1.xyzw
                dcl_output o2.x
                dcl_temps 3
                
                #line 126 "C:\Users\Not John\Desktop\year4\08961\08960_08961_ACW\SandGlobe\SandGlobe\Fog_P_Effect.fx"
                mov r0.xyz, v0.xyzx  // vout<0,1,2>
                mov r0.w, v3.x  // vout<8>
                if_z v3.x
                  mov r1.xyzw, l(1.000000,0,0,0)  // vout<3: 1f,4: 0f,5: 0f,6: 0f>
                else 
                
                #line 134
                  ieq r1.x, r0.w, l(1)
                  if_nz r1.x
                    mov r1.xyz, l(1.000000,1.000000,1.000000,0)  // vout<3: 1f,4: 1f,5: 1f>
                    div r2.x, v2.x, l(18.000000)
                    mul r2.x, r2.x, l(1.800000)
                    mul r1.w, r2.x, l(0.500000)  // vout<6:[-1.70141e+037f,1.70141e+037f]>
                
                #line 134
                  endif 
                
                #line 130
                endif 
                
                #line 140
                mov o0.xyz, r0.xyzx  // Vertex_Render<0,1,2>
                mov o0.w, l(2.000000)  // Vertex_Render<7: 2f>
                mov o1.xyzw, r1.xyzw  // Vertex_Render<3:Inf,4:Inf,5:Inf,6:Inf>
                mov o2.x, r0.w  // Vertex_Render<8>
                ret 
                // Approximately 18 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer vars_for_render
                // {
                //
                //   float4x4 worldViewProj;            // Offset:    0 Size:    64
                //   float4x4 InvViewMx;                // Offset:   64 Size:    64
                //
                // }
                //
                // cbuffer cbImmutable
                // {
                //
                //   float3 fog_positions[4];           // Offset:    0 Size:    60
                //      = 0xbf000000 0x3f000000 0x00000000 0x00000000 
                //        0x3f000000 0x3f000000 0x00000000 0x00000000 
                //        0xbf000000 0xbf000000 0x00000000 0x00000000 
                //        0x3f000000 0xbf000000 0x00000000 
                //   float2 g_texcoords[4];             // Offset:   64 Size:    56
                //      = 0x00000000 0x3f800000 0x00000000 0x00000000 
                //        0x3f800000 0x3f800000 0x00000000 0x00000000 
                //        0x00000000 0x00000000 0x00000000 0x00000000 
                //        0x3f800000 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // vars_for_render                   cbuffer      NA          NA    2        1
                // cbImmutable                       cbuffer      NA          NA    4        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // RADIUS                   0      w        0     NONE  float      w
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                // TYPE                     0   x           2     NONE   uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Position              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXTURE                  0   xy          2     NONE  float   xy  
                // COLOR                    0   xyzw        3     NONE  float   xyzw
                //
                gs_4_0
                dcl_constantbuffer cb2[7], immediateIndexed
                dcl_constantbuffer cb4[8], dynamicIndexed
                dcl_input v[1][0].xyz
                dcl_input v[1][0].w
                dcl_input v[1][1].xyzw
                dcl_input v[1][2].x
                dcl_temps 4
                dcl_inputprimitive point 
                dcl_outputtopology trianglestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o3.xyzw
                dcl_maxout 4
                
                #line 218 "C:\Users\Not John\Desktop\year4\08961\08960_08961_ACW\SandGlobe\SandGlobe\Fog_P_Effect.fx"
                mov r0.x, l(0)  // i<0: 0>
                mov r0.y, r0.x  // i<0>
                loop 
                  ilt r0.z, r0.y, l(4)
                  breakc_z r0.z
                
                #line 221
                  ieq r0.z, v[0][2].x, l(1)
                  if_nz r0.z
                    mov r0.z, r0.y
                    mul r1.xyz, v[0][0].wwww, cb4[r0.z + 0].xyzx  // position<0:Inf,1:Inf,2:Inf>
                  endif 
                
                #line 225
                  dp3 r2.x, r1.xyzx, cb2[4].xyzx
                  dp3 r2.y, r1.xyzx, cb2[5].xyzx
                  dp3 r2.z, r1.xyzx, cb2[6].xyzx
                  add r1.xyz, r2.xyzx, v[0][0].xyzx  // position<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r2.xyz, r1.xyzx  // position<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r1.w, l(1.000000)
                  dp4 r3.x, r1.xyzw, cb2[0].xyzw  // pin<0:NaN:Inf>
                  dp4 r3.y, r1.xyzw, cb2[1].xyzw  // pin<1:NaN:Inf>
                  dp4 r3.z, r1.xyzw, cb2[2].xyzw  // pin<2:NaN:Inf>
                  dp4 r3.w, r1.xyzw, cb2[3].xyzw  // pin<3:NaN:Inf>
                  mov r2.xyz, r2.xyzx  // pin<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                  mov r1.xyzw, v[0][1].xyzw  // pin<9,10,11,12>
                  mov r0.z, r0.y
                  mov r0.zw, cb4[r0.z + 4].xxxy  // pin<7,8>
                  mov o0.xyzw, r3.xyzw  // OutStream<0,0,0,0>
                  mov o1.xyz, r2.xyzx  // OutStream<0,0,0>
                  mov o2.xy, r0.zwzz  // OutStream<0,0>
                  mov o3.xyzw, r1.xyzw  // OutStream<0,0,0,0>
                  emit 
                
                #line 218
                  iadd r0.y, r0.y, l(1)  // i<0>
                endloop 
                
                #line 214
                ret 
                // Approximately 32 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer vars_for_render
                // {
                //
                //   float sea_level;                   // Offset:    0 Size:     4
                //   float3 padding;                    // Offset:    4 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // g_samLinear                       sampler      NA          NA    0        1
                // particle_tex                      texture  float4          2d    1        1
                // vars_for_render                   cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Position              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXTURE                  0   xy          2     NONE  float   xy  
                // COLOR                    0   xyzw        3     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_4_0
                dcl_constantbuffer cb3[1], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v3.xyzw
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 238 "C:\Users\Not John\Desktop\year4\08961\08960_08961_ACW\SandGlobe\SandGlobe\Fog_P_Effect.fx"
                lt r0.x, v1.y, cb3[0].x
                if_nz r0.x
                  discard l(-1)
                endif 
                
                #line 243
                add r0.xyz, v1.xyzx, l(-0.000000, -0.000000, -0.000000, 0.000000)
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // dist<0:NaN:Inf>
                ge r0.x, r0.x, l(4.950000)
                if_nz r0.x
                  discard l(-1)
                endif 
                
                #line 251
                sample r0.xyzw, v2.xyxx, t1.xyzw, s0
                mul o0.xyzw, r0.xyzw, v3.xyzw  // PS_Render<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 14 instruction slots used
                            
            };
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = AdditiveBlending;
        }

    }

    technique11 Calculate_Particles
    {
        pass p0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TIMER                    0   x           2     NONE  float   x   
                // TYPE                     0   x           3     NONE   uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TIMER                    0      w        0     NONE  float      w
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TYPE                     0   x           2     NONE   uint   x   
                //
                vs_4_0
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.x
                dcl_input v3.x
                dcl_output o0.xyz
                dcl_output o0.w
                dcl_output o1.xyz
                dcl_output o2.x
                
                #line 119 "C:\Users\Not John\Desktop\year4\08961\08960_08961_ACW\SandGlobe\SandGlobe\Fog_P_Effect.fx"
                mov o0.xyz, v0.xyzx  // VSPassthrough<0,1,2>
                mov o1.xyz, v1.xyzx  // VSPassthrough<3,4,5>
                mov o0.w, v2.x  // VSPassthrough<6>
                mov o2.x, v3.x  // VSPassthrough<7>
                ret 
                // Approximately 5 instruction slots used
                            
            };
            GeometryShader = geo_shade;
            PixelShader = NULL;
            DS_StencilRef = uint(0);
            DepthStencilState = DisableDepth;
        }

    }

}

