//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerObject : register(b0)
{
    float4x4 worldViewProj;             // Offset:    0, size:   64
    float4x4 viewMx;                    // Offset:   64, size:   64
    float4x4 projMx;                    // Offset:  128, size:   64
    float4x4 reflecMx;                  // Offset:  192, size:   64
    float4x4 worldMx;                   // Offset:  256, size:   64
    float   Time;                       // Offset:  320, size:    4
    float   WaveTime;                   // Offset:  324, size:    4
}

cbuffer pointLight : register(b1)
{
    float3  plight_pos;                 // Offset:    0, size:   12
    float   plight_range;               // Offset:   12, size:    4
    float3  plight_att;                 // Offset:   16, size:   12
    float4  plight_ambient;             // Offset:   32, size:   16
    float4  plight_diffuse;             // Offset:   48, size:   16
    float4  plight_specular;            // Offset:   64, size:   16
    float4  plight_spec_color;          // Offset:   80, size:   16
    float   spec_power;                 // Offset:   96, size:    4
    float3  plight_direction;           // Offset:  100, size:   12
}

//
// 5 local object(s)
//
RasterizerState mainState
{
    FillMode = uint(SOLID /* 3 */);
    CullMode = uint(NONE /* 1 */);
};
Texture2D reflectionTexture;
Texture2D skyTexture;
SamplerState ss
{
};
Texture2D IceTexture;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 2 technique(s)
    //
    technique11 RenderScene
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 worldViewProj;            // Offset:    0 Size:    64
                //   float4x4 viewMx;                   // Offset:   64 Size:    64 [unused]
                //   float4x4 projMx;                   // Offset:  128 Size:    64
                //   float4x4 reflecMx;                 // Offset:  192 Size:    64
                //   float4x4 worldMx;                  // Offset:  256 Size:    64
                //   float Time;                        // Offset:  320 Size:     4
                //   float WaveTime;                    // Offset:  324 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float       
                // COLOR                    0   xyzw        2     NONE  float       
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 2     zw        1     NONE  float     zw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 1   xyzw        3     NONE  float   xyzw
                // COLOR                    0   xyzw        4     NONE  float       
                //
                vs_4_0
                dcl_constantbuffer cb0[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o1.zw
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_temps 8
                
                #line 90 "C:\Users\Not John\Desktop\year4\08961\08960_08961_ACW\SandGlobe\SandGlobe\SeaSurface_Effect.fx"
                mul r0.x, v0.x, l(0.500000)
                mul r0.x, r0.x, cb0[20].y  // xmod<0:Inf>
                mul r0.y, v0.z, l(0.500000)
                mul r0.y, r0.y, cb0[20].y  // zmod<0:Inf>
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(0.100000)  // xmod<0:[-0.1f,0.1f]>
                sincos r0.y, null, r0.y
                mul r0.y, r0.y, l(0.100000)  // zmod<0:[-0.1f,0.1f]>
                add r0.x, r0.x, v0.y  // vin<1>
                add r0.y, r0.y, r0.x  // vin<1>
                mov r1.y, r0.y  // vin<1>
                
                #line 102
                mul r2.xyzw, cb0[8].xxxx, cb0[12].xyzw
                mul r3.xyzw, cb0[8].yyyy, cb0[13].xyzw
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[8].zzzz, cb0[14].xyzw
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[8].wwww, cb0[15].xyzw
                add r2.xyzw, r2.xyzw, r3.xyzw  // preReflectionViewProjection<0:NaN:Inf,4:NaN:Inf,8:NaN:Inf,12:NaN:Inf>
                mul r3.xyzw, cb0[9].xxxx, cb0[12].xyzw
                mul r4.xyzw, cb0[9].yyyy, cb0[13].xyzw
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[9].zzzz, cb0[14].xyzw
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[9].wwww, cb0[15].xyzw
                add r3.xyzw, r3.xyzw, r4.xyzw  // preReflectionViewProjection<1:NaN:Inf,5:NaN:Inf,9:NaN:Inf,13:NaN:Inf>
                mul r4.xyzw, cb0[10].xxxx, cb0[12].xyzw
                mul r5.xyzw, cb0[10].yyyy, cb0[13].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, cb0[10].zzzz, cb0[14].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, cb0[10].wwww, cb0[15].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw  // preReflectionViewProjection<2:NaN:Inf,6:NaN:Inf,10:NaN:Inf,14:NaN:Inf>
                mul r5.xyzw, cb0[11].xxxx, cb0[12].xyzw
                mul r6.xyzw, cb0[11].yyyy, cb0[13].xyzw
                add r5.xyzw, r5.xyzw, r6.xyzw
                mul r6.xyzw, cb0[11].zzzz, cb0[14].xyzw
                add r5.xyzw, r5.xyzw, r6.xyzw
                mul r6.xyzw, cb0[11].wwww, cb0[15].xyzw
                add r5.xyzw, r5.xyzw, r6.xyzw  // preReflectionViewProjection<3:NaN:Inf,7:NaN:Inf,11:NaN:Inf,15:NaN:Inf>
                mul r6.xyzw, r2.xxxx, cb0[16].xyzw
                mul r7.xyzw, r2.yyyy, cb0[17].xyzw
                add r6.xyzw, r6.xyzw, r7.xyzw
                mul r7.xyzw, r2.zzzz, cb0[18].xyzw
                add r6.xyzw, r6.xyzw, r7.xyzw
                mul r2.xyzw, r2.wwww, cb0[19].xyzw
                add r2.xyzw, r2.xyzw, r6.xyzw  // preWorldReflectionViewProjection<0:NaN:Inf,4:NaN:Inf,8:NaN:Inf,12:NaN:Inf>
                mul r6.xyzw, r3.xxxx, cb0[16].xyzw
                mul r7.xyzw, r3.yyyy, cb0[17].xyzw
                add r6.xyzw, r6.xyzw, r7.xyzw
                mul r7.xyzw, r3.zzzz, cb0[18].xyzw
                add r6.xyzw, r6.xyzw, r7.xyzw
                mul r3.xyzw, r3.wwww, cb0[19].xyzw
                add r3.xyzw, r3.xyzw, r6.xyzw  // preWorldReflectionViewProjection<1:NaN:Inf,5:NaN:Inf,9:NaN:Inf,13:NaN:Inf>
                mul r6.xyzw, r4.xxxx, cb0[16].xyzw
                mul r7.xyzw, r4.yyyy, cb0[17].xyzw
                add r6.xyzw, r6.xyzw, r7.xyzw
                mul r7.xyzw, r4.zzzz, cb0[18].xyzw
                add r6.xyzw, r6.xyzw, r7.xyzw
                mul r4.xyzw, r4.wwww, cb0[19].xyzw
                add r4.xyzw, r4.xyzw, r6.xyzw  // preWorldReflectionViewProjection<2:NaN:Inf,6:NaN:Inf,10:NaN:Inf,14:NaN:Inf>
                mul r6.xyzw, r5.xxxx, cb0[16].xyzw
                mul r7.xyzw, r5.yyyy, cb0[17].xyzw
                add r6.xyzw, r6.xyzw, r7.xyzw
                mul r7.xyzw, r5.zzzz, cb0[18].xyzw
                add r6.xyzw, r6.xyzw, r7.xyzw
                mul r5.xyzw, r5.wwww, cb0[19].xyzw
                add r5.xyzw, r5.xyzw, r6.xyzw  // preWorldReflectionViewProjection<3:NaN:Inf,7:NaN:Inf,11:NaN:Inf,15:NaN:Inf>
                
                #line 107
                mov r0.xz, v0.xxzx
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, r2.xyzw  // vout<9:NaN:Inf>
                dp4 r2.y, r0.xyzw, r3.xyzw  // vout<10:NaN:Inf>
                dp4 r2.z, r0.xyzw, r4.xyzw  // vout<11:NaN:Inf>
                dp4 r2.w, r0.xyzw, r5.xyzw  // vout<12:NaN:Inf>
                
                #line 113
                dp4 r3.x, r0.xyzw, cb0[0].xyzw  // vout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[1].xyzw  // vout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[2].xyzw  // vout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[3].xyzw  // vout<3:NaN:Inf>
                mov r0.xy, v3.xyxx  // vout<4,5>
                mul r0.z, cb0[20].x, l(0.020000)
                add r0.z, r0.z, r0.y  // vout<5:Inf>
                
                #line 124
                mov r1.xz, v0.xxzx  // vout<6,8>
                mov r1.y, r1.y  // vout<7>
                
                #line 127
                mov o0.xyzw, r3.xyzw  // RelflectVS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.x, r0.x  // RelflectVS<4>
                mov o1.y, r0.z  // RelflectVS<5:Inf>
                mov o1.zw, r0.xxxy  // RelflectVS<13,14>
                mov o3.xyzw, r2.xyzw  // RelflectVS<9:NaN:Inf,10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o2.xyz, r1.xyzx  // RelflectVS<6,7,8>
                ret 
                // Approximately 89 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // ss                                sampler      NA          NA    0        1
                // reflectionTexture                 texture  float4          2d    0        1
                // skyTexture                        texture  float4          2d    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 2     zw        1     NONE  float       
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 1   xyzw        3     NONE  float   xy w
                // COLOR                    0   xyzw        4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_4_0
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xy
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyw
                dcl_output o0.xyzw
                dcl_temps 2
                
                #line 137 "C:\Users\Not John\Desktop\year4\08961\08960_08961_ACW\SandGlobe\SandGlobe\SeaSurface_Effect.fx"
                add r0.xyz, v2.xyzx, l(-0.000000, -0.000000, -0.000000, 0.000000)
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // dist<0:NaN:Inf>
                ge r0.x, r0.x, l(4.950000)
                if_nz r0.x
                  discard l(-1)
                endif 
                
                #line 154
                div r0.x, v3.x, v3.w
                div r0.x, r0.x, l(2.000000)
                add r0.x, r0.x, l(0.500000)  // ProjectedTexCoords<0:NaN:Inf>
                mov r0.z, -v3.y
                div r0.z, r0.z, v3.w
                div r0.z, r0.z, l(2.000000)
                add r0.y, r0.z, l(0.500000)  // ProjectedTexCoords<1:NaN:Inf>
                sample r0.xyzw, r0.xyxx, t0.xyzw, s0  // reflectionColor<0:Inf,1:Inf,2:Inf,3:Inf>
                eq r1.x, l(1.000000), r0.x
                eq r1.y, l(1.000000), r0.y
                and r1.x, r1.y, r1.x
                eq r1.y, l(1.000000), r0.z
                and r1.x, r1.y, r1.x
                if_nz r1.x
                  sample r0.xyzw, v1.xyxx, t1.xyzw, s0  // reflectionColor<0:Inf,1:Inf,2:Inf,3:Inf>
                endif 
                
                #line 165
                mul o0.xyzw, r0.xyzw, l(0.400000, 0.400000, 0.400000, 0.400000)  // ReflectionPS<0:Inf,1:Inf,2:Inf,3:Inf>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            RasterizerState = mainState;
        }

        pass P1
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 worldViewProj;            // Offset:    0 Size:    64
                //   float4x4 viewMx;                   // Offset:   64 Size:    64 [unused]
                //   float4x4 projMx;                   // Offset:  128 Size:    64 [unused]
                //   float4x4 reflecMx;                 // Offset:  192 Size:    64 [unused]
                //   float4x4 worldMx;                  // Offset:  256 Size:    64 [unused]
                //   float Time;                        // Offset:  320 Size:     4 [unused]
                //   float WaveTime;                    // Offset:  324 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // COLOR                    0   xyzw        2     NONE  float   xyzw
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // SV_POSITION              0   xyzw        1      POS  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // COLOR                    0   xyzw        3     NONE  float   xyzw
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_4_0
                dcl_constantbuffer cb0[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyzw
                dcl_input v3.xy
                dcl_output o0.xyz
                dcl_output_siv o1.xyzw, position
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xy
                dcl_temps 5
                
                #line 69 "C:\Users\Not John\Desktop\year4\08961\08960_08961_ACW\SandGlobe\SandGlobe\SeaSurface_Effect.fx"
                mul r0.x, v0.x, l(0.500000)
                mul r0.x, r0.x, cb0[20].y  // xmod<0:Inf>
                mul r0.y, v0.z, l(0.500000)
                mul r0.y, r0.y, cb0[20].y  // zmod<0:Inf>
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(0.100000)  // xmod<0:[-0.1f,0.1f]>
                sincos r0.y, null, r0.y
                mul r0.y, r0.y, l(0.100000)  // zmod<0:[-0.1f,0.1f]>
                add r0.x, r0.x, v0.y  // vin<1>
                add r0.y, r0.y, r0.x  // vin<1>
                mov r1.y, r0.y  // vin<1>
                mov r0.xz, v0.xxzx
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[0].xyzw  // vout<3:NaN:Inf>
                dp4 r2.y, r0.xyzw, cb0[1].xyzw  // vout<4:NaN:Inf>
                dp4 r2.z, r0.xyzw, cb0[2].xyzw  // vout<5:NaN:Inf>
                dp4 r2.w, r0.xyzw, cb0[3].xyzw  // vout<6:NaN:Inf>
                mov r1.xz, v0.xxzx  // vout<0,2>
                mov r1.y, r1.y  // vout<1>
                mov r0.xyzw, v2.xyzw  // vout<10,11,12,13>
                
                #line 80
                mov r3.xyz, v1.xyzx  // vout<7,8,9>
                mov r4.xy, v3.xyxx  // vout<14,15>
                mov o1.xyzw, r2.xyzw  // RenderSceneVS<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o3.xyzw, r0.xyzw  // RenderSceneVS<10,11,12,13>
                mov o0.xyz, r1.xyzx  // RenderSceneVS<0,1,2>
                mov o2.xyz, r3.xyzx  // RenderSceneVS<7,8,9>
                mov o4.xy, r4.xyxx  // RenderSceneVS<14,15>
                ret 
                // Approximately 28 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer pointLight
                // {
                //
                //   float3 plight_pos;                 // Offset:    0 Size:    12
                //   float plight_range;                // Offset:   12 Size:     4 [unused]
                //   float3 plight_att;                 // Offset:   16 Size:    12 [unused]
                //   float4 plight_ambient;             // Offset:   32 Size:    16
                //   float4 plight_diffuse;             // Offset:   48 Size:    16 [unused]
                //   float4 plight_specular;            // Offset:   64 Size:    16 [unused]
                //   float4 plight_spec_color;          // Offset:   80 Size:    16 [unused]
                //   float spec_power;                  // Offset:   96 Size:     4 [unused]
                //   float3 plight_direction;           // Offset:  100 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // pointLight                        cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // SV_POSITION              0   xyzw        1      POS  float       
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // COLOR                    0   xyzw        3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_4_0
                dcl_constantbuffer cb1[3], immediateIndexed
                dcl_input_ps linear v0.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 4
                
                #line 224 "C:\Users\Not John\Desktop\year4\08961\08960_08961_ACW\SandGlobe\SandGlobe\SeaSurface_Effect.fx"
                add r0.xyz, v0.xyzx, l(-0.000000, -0.000000, -0.000000, 0.000000)
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // dist<0:NaN:Inf>
                ge r0.x, r0.x, l(4.950000)
                if_nz r0.x
                  discard l(-1)
                endif 
                
                #line 229
                mul r0.xyz, cb1[2].xyzx, l(0.200000, 0.200000, 0.200000, 0.000000)  // color_plus_ambuient<0:[-6.80565e+037f,6.80565e+037f],1:[-6.80565e+037f,6.80565e+037f],2:[-6.80565e+037f,6.80565e+037f]>
                mov r1.xyz, -v0.xyzx
                add r1.xyz, r1.xyzx, cb1[0].xyzx  // Lightvector<0:Inf,1:Inf,2:Inf>
                mov r2.xyz, v2.xyzx  // pNormal<0,1,2>
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // LDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.w, v2.xyzx, v2.xyzx
                rsq r0.w, r0.w
                mul r3.xyz, r0.wwww, v2.xyzx
                dp3 r0.w, r3.xyzx, r1.xyzx
                mul r0.xyz, r0.wwww, r0.xyzx  // LightIntensity<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.w, r2.xyzx, r1.xyzx
                mul r0.xyz, r0.wwww, r0.xyzx
                max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                min r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // FinalColor<0:[0f,1f],1:[0f,1f],2:[0f,1f]>
                
                #line 237
                mov o0.xyz, r0.xyzx  // PSPointLight<0:[0f,1f],1:[0f,1f],2:[0f,1f]>
                mov o0.w, l(1.000000)  // PSPointLight<3: 1f>
                ret 
                // Approximately 26 instruction slots used
                            
            };
            RasterizerState = mainState;
        }

        pass P2
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 worldViewProj;            // Offset:    0 Size:    64
                //   float4x4 viewMx;                   // Offset:   64 Size:    64 [unused]
                //   float4x4 projMx;                   // Offset:  128 Size:    64 [unused]
                //   float4x4 reflecMx;                 // Offset:  192 Size:    64 [unused]
                //   float4x4 worldMx;                  // Offset:  256 Size:    64 [unused]
                //   float Time;                        // Offset:  320 Size:     4 [unused]
                //   float WaveTime;                    // Offset:  324 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // COLOR                    0   xyzw        2     NONE  float   xyzw
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // SV_POSITION              0   xyzw        1      POS  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // COLOR                    0   xyzw        3     NONE  float   xyzw
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_4_0
                dcl_constantbuffer cb0[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyzw
                dcl_input v3.xy
                dcl_output o0.xyz
                dcl_output_siv o1.xyzw, position
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xy
                dcl_temps 5
                
                #line 69 "C:\Users\Not John\Desktop\year4\08961\08960_08961_ACW\SandGlobe\SandGlobe\SeaSurface_Effect.fx"
                mul r0.x, v0.x, l(0.500000)
                mul r0.x, r0.x, cb0[20].y  // xmod<0:Inf>
                mul r0.y, v0.z, l(0.500000)
                mul r0.y, r0.y, cb0[20].y  // zmod<0:Inf>
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(0.100000)  // xmod<0:[-0.1f,0.1f]>
                sincos r0.y, null, r0.y
                mul r0.y, r0.y, l(0.100000)  // zmod<0:[-0.1f,0.1f]>
                add r0.x, r0.x, v0.y  // vin<1>
                add r0.y, r0.y, r0.x  // vin<1>
                mov r1.y, r0.y  // vin<1>
                mov r0.xz, v0.xxzx
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[0].xyzw  // vout<3:NaN:Inf>
                dp4 r2.y, r0.xyzw, cb0[1].xyzw  // vout<4:NaN:Inf>
                dp4 r2.z, r0.xyzw, cb0[2].xyzw  // vout<5:NaN:Inf>
                dp4 r2.w, r0.xyzw, cb0[3].xyzw  // vout<6:NaN:Inf>
                mov r1.xz, v0.xxzx  // vout<0,2>
                mov r1.y, r1.y  // vout<1>
                mov r0.xyzw, v2.xyzw  // vout<10,11,12,13>
                
                #line 80
                mov r3.xyz, v1.xyzx  // vout<7,8,9>
                mov r4.xy, v3.xyxx  // vout<14,15>
                mov o1.xyzw, r2.xyzw  // RenderSceneVS<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o3.xyzw, r0.xyzw  // RenderSceneVS<10,11,12,13>
                mov o0.xyz, r1.xyzx  // RenderSceneVS<0,1,2>
                mov o2.xyz, r3.xyzx  // RenderSceneVS<7,8,9>
                mov o4.xy, r4.xyxx  // RenderSceneVS<14,15>
                ret 
                // Approximately 28 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer pointLight
                // {
                //
                //   float3 plight_pos;                 // Offset:    0 Size:    12 [unused]
                //   float plight_range;                // Offset:   12 Size:     4 [unused]
                //   float3 plight_att;                 // Offset:   16 Size:    12 [unused]
                //   float4 plight_ambient;             // Offset:   32 Size:    16
                //   float4 plight_diffuse;             // Offset:   48 Size:    16 [unused]
                //   float4 plight_specular;            // Offset:   64 Size:    16 [unused]
                //   float4 plight_spec_color;          // Offset:   80 Size:    16 [unused]
                //   float spec_power;                  // Offset:   96 Size:     4 [unused]
                //   float3 plight_direction;           // Offset:  100 Size:    12
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // pointLight                        cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // SV_POSITION              0   xyzw        1      POS  float       
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // COLOR                    0   xyzw        3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_4_0
                dcl_constantbuffer cb1[7], immediateIndexed
                dcl_input_ps linear v0.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 3
                
                #line 244 "C:\Users\Not John\Desktop\year4\08961\08960_08961_ACW\SandGlobe\SandGlobe\SeaSurface_Effect.fx"
                add r0.xyz, v0.xyzx, l(-0.000000, -0.000000, -0.000000, 0.000000)
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // dist<0:NaN:Inf>
                ge r0.x, r0.x, l(4.950000)
                if_nz r0.x
                  discard l(-1)
                endif 
                
                #line 249
                mov r0.xyz, cb1[2].xyzx  // LightColor<0,1,2>
                mov r1.xyz, v2.xyzx  // pNormal<0,1,2>
                mov r2.xyz, -cb1[6].yzwy
                dp3 r0.w, r2.xyzx, r2.xyzx
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, r2.xyzx  // LDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.w, cb1[6].yzwy, cb1[6].yzwy
                sqrt r0.w, r0.w
                log r0.w, r0.w
                mul r0.w, r0.w, l(0.800000)
                exp r0.w, r0.w
                div r0.xyz, r0.xyzx, r0.wwww  // LightIntensity<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.w, r1.xyzx, r2.xyzx
                mul r0.xyz, r0.wwww, r0.xyzx
                max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                min r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // FinalColor<0:[0f,1f],1:[0f,1f],2:[0f,1f]>
                
                #line 256
                mov o0.xyz, r0.xyzx  // PSDirLight<0:[0f,1f],1:[0f,1f],2:[0f,1f]>
                mov o0.w, l(1.000000)  // PSDirLight<3: 1f>
                ret 
                // Approximately 26 instruction slots used
                            
            };
            RasterizerState = mainState;
        }

    }

    technique11 RenderSceneIce
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 worldViewProj;            // Offset:    0 Size:    64
                //   float4x4 viewMx;                   // Offset:   64 Size:    64 [unused]
                //   float4x4 projMx;                   // Offset:  128 Size:    64
                //   float4x4 reflecMx;                 // Offset:  192 Size:    64
                //   float4x4 worldMx;                  // Offset:  256 Size:    64
                //   float Time;                        // Offset:  320 Size:     4
                //   float WaveTime;                    // Offset:  324 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float       
                // COLOR                    0   xyzw        2     NONE  float       
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 2     zw        1     NONE  float     zw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 1   xyzw        3     NONE  float   xyzw
                // COLOR                    0   xyzw        4     NONE  float       
                //
                vs_4_0
                dcl_constantbuffer cb0[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o1.zw
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_temps 8
                
                #line 90 "C:\Users\Not John\Desktop\year4\08961\08960_08961_ACW\SandGlobe\SandGlobe\SeaSurface_Effect.fx"
                mul r0.x, v0.x, l(0.500000)
                mul r0.x, r0.x, cb0[20].y  // xmod<0:Inf>
                mul r0.y, v0.z, l(0.500000)
                mul r0.y, r0.y, cb0[20].y  // zmod<0:Inf>
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(0.100000)  // xmod<0:[-0.1f,0.1f]>
                sincos r0.y, null, r0.y
                mul r0.y, r0.y, l(0.100000)  // zmod<0:[-0.1f,0.1f]>
                add r0.x, r0.x, v0.y  // vin<1>
                add r0.y, r0.y, r0.x  // vin<1>
                mov r1.y, r0.y  // vin<1>
                
                #line 102
                mul r2.xyzw, cb0[8].xxxx, cb0[12].xyzw
                mul r3.xyzw, cb0[8].yyyy, cb0[13].xyzw
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[8].zzzz, cb0[14].xyzw
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r3.xyzw, cb0[8].wwww, cb0[15].xyzw
                add r2.xyzw, r2.xyzw, r3.xyzw  // preReflectionViewProjection<0:NaN:Inf,4:NaN:Inf,8:NaN:Inf,12:NaN:Inf>
                mul r3.xyzw, cb0[9].xxxx, cb0[12].xyzw
                mul r4.xyzw, cb0[9].yyyy, cb0[13].xyzw
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[9].zzzz, cb0[14].xyzw
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r4.xyzw, cb0[9].wwww, cb0[15].xyzw
                add r3.xyzw, r3.xyzw, r4.xyzw  // preReflectionViewProjection<1:NaN:Inf,5:NaN:Inf,9:NaN:Inf,13:NaN:Inf>
                mul r4.xyzw, cb0[10].xxxx, cb0[12].xyzw
                mul r5.xyzw, cb0[10].yyyy, cb0[13].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, cb0[10].zzzz, cb0[14].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw
                mul r5.xyzw, cb0[10].wwww, cb0[15].xyzw
                add r4.xyzw, r4.xyzw, r5.xyzw  // preReflectionViewProjection<2:NaN:Inf,6:NaN:Inf,10:NaN:Inf,14:NaN:Inf>
                mul r5.xyzw, cb0[11].xxxx, cb0[12].xyzw
                mul r6.xyzw, cb0[11].yyyy, cb0[13].xyzw
                add r5.xyzw, r5.xyzw, r6.xyzw
                mul r6.xyzw, cb0[11].zzzz, cb0[14].xyzw
                add r5.xyzw, r5.xyzw, r6.xyzw
                mul r6.xyzw, cb0[11].wwww, cb0[15].xyzw
                add r5.xyzw, r5.xyzw, r6.xyzw  // preReflectionViewProjection<3:NaN:Inf,7:NaN:Inf,11:NaN:Inf,15:NaN:Inf>
                mul r6.xyzw, r2.xxxx, cb0[16].xyzw
                mul r7.xyzw, r2.yyyy, cb0[17].xyzw
                add r6.xyzw, r6.xyzw, r7.xyzw
                mul r7.xyzw, r2.zzzz, cb0[18].xyzw
                add r6.xyzw, r6.xyzw, r7.xyzw
                mul r2.xyzw, r2.wwww, cb0[19].xyzw
                add r2.xyzw, r2.xyzw, r6.xyzw  // preWorldReflectionViewProjection<0:NaN:Inf,4:NaN:Inf,8:NaN:Inf,12:NaN:Inf>
                mul r6.xyzw, r3.xxxx, cb0[16].xyzw
                mul r7.xyzw, r3.yyyy, cb0[17].xyzw
                add r6.xyzw, r6.xyzw, r7.xyzw
                mul r7.xyzw, r3.zzzz, cb0[18].xyzw
                add r6.xyzw, r6.xyzw, r7.xyzw
                mul r3.xyzw, r3.wwww, cb0[19].xyzw
                add r3.xyzw, r3.xyzw, r6.xyzw  // preWorldReflectionViewProjection<1:NaN:Inf,5:NaN:Inf,9:NaN:Inf,13:NaN:Inf>
                mul r6.xyzw, r4.xxxx, cb0[16].xyzw
                mul r7.xyzw, r4.yyyy, cb0[17].xyzw
                add r6.xyzw, r6.xyzw, r7.xyzw
                mul r7.xyzw, r4.zzzz, cb0[18].xyzw
                add r6.xyzw, r6.xyzw, r7.xyzw
                mul r4.xyzw, r4.wwww, cb0[19].xyzw
                add r4.xyzw, r4.xyzw, r6.xyzw  // preWorldReflectionViewProjection<2:NaN:Inf,6:NaN:Inf,10:NaN:Inf,14:NaN:Inf>
                mul r6.xyzw, r5.xxxx, cb0[16].xyzw
                mul r7.xyzw, r5.yyyy, cb0[17].xyzw
                add r6.xyzw, r6.xyzw, r7.xyzw
                mul r7.xyzw, r5.zzzz, cb0[18].xyzw
                add r6.xyzw, r6.xyzw, r7.xyzw
                mul r5.xyzw, r5.wwww, cb0[19].xyzw
                add r5.xyzw, r5.xyzw, r6.xyzw  // preWorldReflectionViewProjection<3:NaN:Inf,7:NaN:Inf,11:NaN:Inf,15:NaN:Inf>
                
                #line 107
                mov r0.xz, v0.xxzx
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, r2.xyzw  // vout<9:NaN:Inf>
                dp4 r2.y, r0.xyzw, r3.xyzw  // vout<10:NaN:Inf>
                dp4 r2.z, r0.xyzw, r4.xyzw  // vout<11:NaN:Inf>
                dp4 r2.w, r0.xyzw, r5.xyzw  // vout<12:NaN:Inf>
                
                #line 113
                dp4 r3.x, r0.xyzw, cb0[0].xyzw  // vout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[1].xyzw  // vout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[2].xyzw  // vout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[3].xyzw  // vout<3:NaN:Inf>
                mov r0.xy, v3.xyxx  // vout<4,5>
                mul r0.z, cb0[20].x, l(0.020000)
                add r0.z, r0.z, r0.y  // vout<5:Inf>
                
                #line 124
                mov r1.xz, v0.xxzx  // vout<6,8>
                mov r1.y, r1.y  // vout<7>
                
                #line 127
                mov o0.xyzw, r3.xyzw  // RelflectVS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.x, r0.x  // RelflectVS<4>
                mov o1.y, r0.z  // RelflectVS<5:Inf>
                mov o1.zw, r0.xxxy  // RelflectVS<13,14>
                mov o3.xyzw, r2.xyzw  // RelflectVS<9:NaN:Inf,10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o2.xyz, r1.xyzx  // RelflectVS<6,7,8>
                ret 
                // Approximately 89 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // ss                                sampler      NA          NA    0        1
                // reflectionTexture                 texture  float4          2d    0        1
                // skyTexture                        texture  float4          2d    1        1
                // IceTexture                        texture  float4          2d    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 2     zw        1     NONE  float     zw
                // POSITION                 0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 1   xyzw        3     NONE  float   xy w
                // COLOR                    0   xyzw        4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_4_0
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xy
                dcl_input_ps linear v1.zw
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyw
                dcl_output o0.xyzw
                dcl_temps 3
                
                #line 172 "C:\Users\Not John\Desktop\year4\08961\08960_08961_ACW\SandGlobe\SandGlobe\SeaSurface_Effect.fx"
                add r0.xyz, v2.xyzx, l(-0.000000, -0.000000, -0.000000, 0.000000)
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // dist<0:NaN:Inf>
                ge r0.x, r0.x, l(4.950000)
                if_nz r0.x
                  discard l(-1)
                endif 
                
                #line 189
                div r0.x, v3.x, v3.w
                div r0.x, r0.x, l(2.000000)
                add r0.x, r0.x, l(0.500000)  // ProjectedTexCoords<0:NaN:Inf>
                mov r0.z, -v3.y
                div r0.z, r0.z, v3.w
                div r0.z, r0.z, l(2.000000)
                add r0.y, r0.z, l(0.500000)  // ProjectedTexCoords<1:NaN:Inf>
                sample r0.xyzw, r0.xyxx, t0.xyzw, s0  // reflectionColor<0:Inf,1:Inf,2:Inf,3:Inf>
                eq r1.x, l(1.000000), r0.x
                eq r1.y, l(1.000000), r0.y
                and r1.x, r1.y, r1.x
                eq r1.y, l(1.000000), r0.z
                and r1.x, r1.y, r1.x
                if_nz r1.x
                  sample r0.xyzw, v1.xyxx, t1.xyzw, s0  // reflectionColor<0:Inf,1:Inf,2:Inf,3:Inf>
                endif 
                
                #line 199
                sample r1.xyzw, v1.zwzz, t2.xyzw, s0
                mov r1.x, r1.x  // ice<0:Inf>
                mov r2.xyzw, -r1.xxxx
                add r0.xyzw, r0.xyzw, r2.xyzw
                mul r0.xyzw, r0.xyzw, l(0.300000, 0.300000, 0.300000, 0.300000)
                add r0.xyzw, r0.xyzw, r1.xxxx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 203
                mul o0.xyzw, r0.xyzw, l(0.400000, 0.400000, 0.400000, 0.400000)  // ReflectionPSIce<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 31 instruction slots used
                            
            };
            RasterizerState = mainState;
        }

        pass P1
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 worldViewProj;            // Offset:    0 Size:    64
                //   float4x4 viewMx;                   // Offset:   64 Size:    64 [unused]
                //   float4x4 projMx;                   // Offset:  128 Size:    64 [unused]
                //   float4x4 reflecMx;                 // Offset:  192 Size:    64 [unused]
                //   float4x4 worldMx;                  // Offset:  256 Size:    64 [unused]
                //   float Time;                        // Offset:  320 Size:     4 [unused]
                //   float WaveTime;                    // Offset:  324 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // COLOR                    0   xyzw        2     NONE  float   xyzw
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // SV_POSITION              0   xyzw        1      POS  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // COLOR                    0   xyzw        3     NONE  float   xyzw
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_4_0
                dcl_constantbuffer cb0[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyzw
                dcl_input v3.xy
                dcl_output o0.xyz
                dcl_output_siv o1.xyzw, position
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xy
                dcl_temps 5
                
                #line 69 "C:\Users\Not John\Desktop\year4\08961\08960_08961_ACW\SandGlobe\SandGlobe\SeaSurface_Effect.fx"
                mul r0.x, v0.x, l(0.500000)
                mul r0.x, r0.x, cb0[20].y  // xmod<0:Inf>
                mul r0.y, v0.z, l(0.500000)
                mul r0.y, r0.y, cb0[20].y  // zmod<0:Inf>
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(0.100000)  // xmod<0:[-0.1f,0.1f]>
                sincos r0.y, null, r0.y
                mul r0.y, r0.y, l(0.100000)  // zmod<0:[-0.1f,0.1f]>
                add r0.x, r0.x, v0.y  // vin<1>
                add r0.y, r0.y, r0.x  // vin<1>
                mov r1.y, r0.y  // vin<1>
                mov r0.xz, v0.xxzx
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[0].xyzw  // vout<3:NaN:Inf>
                dp4 r2.y, r0.xyzw, cb0[1].xyzw  // vout<4:NaN:Inf>
                dp4 r2.z, r0.xyzw, cb0[2].xyzw  // vout<5:NaN:Inf>
                dp4 r2.w, r0.xyzw, cb0[3].xyzw  // vout<6:NaN:Inf>
                mov r1.xz, v0.xxzx  // vout<0,2>
                mov r1.y, r1.y  // vout<1>
                mov r0.xyzw, v2.xyzw  // vout<10,11,12,13>
                
                #line 80
                mov r3.xyz, v1.xyzx  // vout<7,8,9>
                mov r4.xy, v3.xyxx  // vout<14,15>
                mov o1.xyzw, r2.xyzw  // RenderSceneVS<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o3.xyzw, r0.xyzw  // RenderSceneVS<10,11,12,13>
                mov o0.xyz, r1.xyzx  // RenderSceneVS<0,1,2>
                mov o2.xyz, r3.xyzx  // RenderSceneVS<7,8,9>
                mov o4.xy, r4.xyxx  // RenderSceneVS<14,15>
                ret 
                // Approximately 28 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer pointLight
                // {
                //
                //   float3 plight_pos;                 // Offset:    0 Size:    12
                //   float plight_range;                // Offset:   12 Size:     4 [unused]
                //   float3 plight_att;                 // Offset:   16 Size:    12 [unused]
                //   float4 plight_ambient;             // Offset:   32 Size:    16
                //   float4 plight_diffuse;             // Offset:   48 Size:    16 [unused]
                //   float4 plight_specular;            // Offset:   64 Size:    16 [unused]
                //   float4 plight_spec_color;          // Offset:   80 Size:    16 [unused]
                //   float spec_power;                  // Offset:   96 Size:     4 [unused]
                //   float3 plight_direction;           // Offset:  100 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // pointLight                        cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // SV_POSITION              0   xyzw        1      POS  float       
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // COLOR                    0   xyzw        3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_4_0
                dcl_constantbuffer cb1[3], immediateIndexed
                dcl_input_ps linear v0.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 4
                
                #line 224 "C:\Users\Not John\Desktop\year4\08961\08960_08961_ACW\SandGlobe\SandGlobe\SeaSurface_Effect.fx"
                add r0.xyz, v0.xyzx, l(-0.000000, -0.000000, -0.000000, 0.000000)
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // dist<0:NaN:Inf>
                ge r0.x, r0.x, l(4.950000)
                if_nz r0.x
                  discard l(-1)
                endif 
                
                #line 229
                mul r0.xyz, cb1[2].xyzx, l(0.200000, 0.200000, 0.200000, 0.000000)  // color_plus_ambuient<0:[-6.80565e+037f,6.80565e+037f],1:[-6.80565e+037f,6.80565e+037f],2:[-6.80565e+037f,6.80565e+037f]>
                mov r1.xyz, -v0.xyzx
                add r1.xyz, r1.xyzx, cb1[0].xyzx  // Lightvector<0:Inf,1:Inf,2:Inf>
                mov r2.xyz, v2.xyzx  // pNormal<0,1,2>
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // LDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.w, v2.xyzx, v2.xyzx
                rsq r0.w, r0.w
                mul r3.xyz, r0.wwww, v2.xyzx
                dp3 r0.w, r3.xyzx, r1.xyzx
                mul r0.xyz, r0.wwww, r0.xyzx  // LightIntensity<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.w, r2.xyzx, r1.xyzx
                mul r0.xyz, r0.wwww, r0.xyzx
                max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                min r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // FinalColor<0:[0f,1f],1:[0f,1f],2:[0f,1f]>
                
                #line 237
                mov o0.xyz, r0.xyzx  // PSPointLight<0:[0f,1f],1:[0f,1f],2:[0f,1f]>
                mov o0.w, l(1.000000)  // PSPointLight<3: 1f>
                ret 
                // Approximately 26 instruction slots used
                            
            };
            RasterizerState = mainState;
        }

        pass P2
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 worldViewProj;            // Offset:    0 Size:    64
                //   float4x4 viewMx;                   // Offset:   64 Size:    64 [unused]
                //   float4x4 projMx;                   // Offset:  128 Size:    64 [unused]
                //   float4x4 reflecMx;                 // Offset:  192 Size:    64 [unused]
                //   float4x4 worldMx;                  // Offset:  256 Size:    64 [unused]
                //   float Time;                        // Offset:  320 Size:     4 [unused]
                //   float WaveTime;                    // Offset:  324 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // COLOR                    0   xyzw        2     NONE  float   xyzw
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // SV_POSITION              0   xyzw        1      POS  float   xyzw
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // COLOR                    0   xyzw        3     NONE  float   xyzw
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_4_0
                dcl_constantbuffer cb0[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyzw
                dcl_input v3.xy
                dcl_output o0.xyz
                dcl_output_siv o1.xyzw, position
                dcl_output o2.xyz
                dcl_output o3.xyzw
                dcl_output o4.xy
                dcl_temps 5
                
                #line 69 "C:\Users\Not John\Desktop\year4\08961\08960_08961_ACW\SandGlobe\SandGlobe\SeaSurface_Effect.fx"
                mul r0.x, v0.x, l(0.500000)
                mul r0.x, r0.x, cb0[20].y  // xmod<0:Inf>
                mul r0.y, v0.z, l(0.500000)
                mul r0.y, r0.y, cb0[20].y  // zmod<0:Inf>
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(0.100000)  // xmod<0:[-0.1f,0.1f]>
                sincos r0.y, null, r0.y
                mul r0.y, r0.y, l(0.100000)  // zmod<0:[-0.1f,0.1f]>
                add r0.x, r0.x, v0.y  // vin<1>
                add r0.y, r0.y, r0.x  // vin<1>
                mov r1.y, r0.y  // vin<1>
                mov r0.xz, v0.xxzx
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[0].xyzw  // vout<3:NaN:Inf>
                dp4 r2.y, r0.xyzw, cb0[1].xyzw  // vout<4:NaN:Inf>
                dp4 r2.z, r0.xyzw, cb0[2].xyzw  // vout<5:NaN:Inf>
                dp4 r2.w, r0.xyzw, cb0[3].xyzw  // vout<6:NaN:Inf>
                mov r1.xz, v0.xxzx  // vout<0,2>
                mov r1.y, r1.y  // vout<1>
                mov r0.xyzw, v2.xyzw  // vout<10,11,12,13>
                
                #line 80
                mov r3.xyz, v1.xyzx  // vout<7,8,9>
                mov r4.xy, v3.xyxx  // vout<14,15>
                mov o1.xyzw, r2.xyzw  // RenderSceneVS<3:NaN:Inf,4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o3.xyzw, r0.xyzw  // RenderSceneVS<10,11,12,13>
                mov o0.xyz, r1.xyzx  // RenderSceneVS<0,1,2>
                mov o2.xyz, r3.xyzx  // RenderSceneVS<7,8,9>
                mov o4.xy, r4.xyxx  // RenderSceneVS<14,15>
                ret 
                // Approximately 28 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer pointLight
                // {
                //
                //   float3 plight_pos;                 // Offset:    0 Size:    12 [unused]
                //   float plight_range;                // Offset:   12 Size:     4 [unused]
                //   float3 plight_att;                 // Offset:   16 Size:    12 [unused]
                //   float4 plight_ambient;             // Offset:   32 Size:    16
                //   float4 plight_diffuse;             // Offset:   48 Size:    16 [unused]
                //   float4 plight_specular;            // Offset:   64 Size:    16 [unused]
                //   float4 plight_spec_color;          // Offset:   80 Size:    16 [unused]
                //   float spec_power;                  // Offset:   96 Size:     4 [unused]
                //   float3 plight_direction;           // Offset:  100 Size:    12
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // pointLight                        cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // SV_POSITION              0   xyzw        1      POS  float       
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // COLOR                    0   xyzw        3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TARGET                0   xyzw        0   TARGET  float   xyzw
                //
                ps_4_0
                dcl_constantbuffer cb1[7], immediateIndexed
                dcl_input_ps linear v0.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 3
                
                #line 244 "C:\Users\Not John\Desktop\year4\08961\08960_08961_ACW\SandGlobe\SandGlobe\SeaSurface_Effect.fx"
                add r0.xyz, v0.xyzx, l(-0.000000, -0.000000, -0.000000, 0.000000)
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // dist<0:NaN:Inf>
                ge r0.x, r0.x, l(4.950000)
                if_nz r0.x
                  discard l(-1)
                endif 
                
                #line 249
                mov r0.xyz, cb1[2].xyzx  // LightColor<0,1,2>
                mov r1.xyz, v2.xyzx  // pNormal<0,1,2>
                mov r2.xyz, -cb1[6].yzwy
                dp3 r0.w, r2.xyzx, r2.xyzx
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, r2.xyzx  // LDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.w, cb1[6].yzwy, cb1[6].yzwy
                sqrt r0.w, r0.w
                log r0.w, r0.w
                mul r0.w, r0.w, l(0.800000)
                exp r0.w, r0.w
                div r0.xyz, r0.xyzx, r0.wwww  // LightIntensity<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.w, r1.xyzx, r2.xyzx
                mul r0.xyz, r0.wwww, r0.xyzx
                max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
                min r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // FinalColor<0:[0f,1f],1:[0f,1f],2:[0f,1f]>
                
                #line 256
                mov o0.xyz, r0.xyzx  // PSDirLight<0:[0f,1f],1:[0f,1f],2:[0f,1f]>
                mov o0.w, l(1.000000)  // PSDirLight<3: 1f>
                ret 
                // Approximately 26 instruction slots used
                            
            };
            RasterizerState = mainState;
        }

    }

}

